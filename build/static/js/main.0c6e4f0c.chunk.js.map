{"version":3,"sources":["components/Button/index.js","components/Card/index.js","contentful.js","pages/Home.js","components/SingleCard/index.js","pages/SinglePost.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Btn","styled","button","Button","props","href","slug","StyledDiv","div","Card","key","i","alt","src","image","title","price","date","address","client","require","createClient","space","process","accessToken","Wrapper","Home","React","useState","posts","setPosts","useEffect","getEntries","content_type","then","entries","items","map","post","fields","pickUpDate","split","orderDate","pickUpdate","dish","file","url","pickUpAddress","StyledSingleCard","SingleCard","className","portions","description","ingredients","ingredient","SinglePost","setPost","StyledHeader","Header","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c6e4f0c.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Btn = styled.button`\n  background-color: tomato;\n  width: 100px;\n  height: 40px;\n  box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.41);\n  border: none;\n  font-size: 16px;\n  color: white;\n  transition: all 0.1s ease-in-out;\n\n  &:hover {\n    transform: scale(0.95);\n    background-color: white;\n    color: tomato;\n  }\n`;\nfunction Button(props) {\n  return (\n    <div>\n      <a href={props.slug}>\n        <Btn>Read more</Btn>\n      </a>\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./../Button\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  width: 350px;\n  margin: 10px;\n  box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.41);\n  margin-bottom: 50px;\n\n  :nth-child(1) {\n    margin-top: 100px;\n  }\n  h3 {\n    color: red;\n    text-align: center;\n    padding: 10px;\n  }\n\n  img {\n    width: 350px;\n    height: 300px;\n    object-fit: cover;\n  }\n\n  div {\n    padding: 5px;\n\n    div {\n      display: flex;\n      justify-content: space-evenly;\n\n      p {\n        color: #6e6e6e;\n      }\n    }\n  }\n`;\n\nfunction Card(props) {\n  return (\n    <StyledDiv key={props.i}>\n      <img alt=\"food\" src={props.image}></img>\n      <div>\n        <h3>{props.title}</h3>\n        <div>\n          <p>{props.price} kr</p>\n          <p>{props.date}</p>\n          <p>{props.address}</p>\n        </div>\n        <Button slug={props.slug} />\n      </div>\n    </StyledDiv>\n  );\n}\n\nexport default Card;\n","const contentful = require(\"contentful\");\n\nconst spaceKey = process.env.REACT_APP_SPACE_KEY;\nconst accessToken = process.env.REACT_APP_ACCESS_TOKEN;\n\nconst client = contentful.createClient({\n  space: spaceKey,\n  accessToken: accessToken,\n});\n\nexport default client;\n","import React from \"react\";\nimport Card from \"./../components/Card\";\nimport client from \"./../contentful\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  background-color: white;\n  display: flex;\n  jusify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nfunction Home() {\n  const [posts, setPosts] = React.useState(null);\n\n  React.useEffect(() => {\n    client\n      .getEntries({\n        content_type: \"quarantineFoodPickUp\",\n      })\n      .then((entries) => {\n        setPosts(entries.items);\n      });\n  }, []);\n\n  if (!posts) {\n    return <div>Loading</div>;\n  }\n\n  return (\n    <Wrapper>\n      {posts &&\n        posts.map((post, i) => {\n          const fields = post.fields.pickUpDate.split(\"T\");\n          const date = fields[0];\n\n          const orderDate = date.split(\"-\");\n          const pickUpdate = `${fields[1]} ${orderDate[2]}/${orderDate[1]}/${orderDate[0]}`;\n\n          return (\n            <Card\n              key={i}\n              title={post.fields.dish}\n              image={post.fields.image.fields.file.url}\n              price={post.fields.price}\n              date={pickUpdate}\n              address={post.fields.pickUpAddress}\n              slug={`posts/${post.fields.slug}`}\n            />\n          );\n        })}\n    </Wrapper>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSingleCard = styled.div`\n  width: 350px;\n  box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.41);\n  margin-top: 100px;\n\n  h3 {\n    color: red;\n    text-align: center;\n  }\n  .portions {\n    text-align: right;\n    margin-top: -20px;\n    margin-bottom: 20px;\n  }\n  img {\n    width: 350px;\n    height: 300px;\n    object-fit: cover;\n  }\n\n  div {\n    padding: 10px;\n    .info-box {\n      display: flex;\n      justify-content: space-evenly;\n\n      p {\n        color: #6e6e6e;\n      }\n    }\n  }\n\n  .ingredients {\n    border: 1px solid #6e6e6e;\n    width: 50%;\n  }\n  ul {\n    list-style-type: none;\n  }\n`;\n\nfunction SingleCard(props) {\n  return (\n    <StyledSingleCard key={props.i}>\n      <img className=\"image\" alt=\"food\" src={props.image}></img>\n      <div>\n        <h3>{props.title}</h3>\n        <p className=\"portions\">{props.portions} Portions</p>\n\n        <div className=\"info-box\">\n          <p>{props.price} Kr</p>\n          <p>{props.date}</p>\n          <p>{props.address}</p>\n        </div>\n        <p>{props.description}</p>\n\n        <div className=\"ingredients\">\n          <p>Ingredients:</p>\n          <ul>\n            {props.ingredients.map((ingredient, i) => {\n              return <li key={i}>{ingredient}</li>;\n            })}\n          </ul>\n        </div>\n      </div>\n    </StyledSingleCard>\n  );\n}\n\nexport default SingleCard;\n","import React from \"react\";\nimport SingleCard from \"./../components/SingleCard\";\nimport client from \"./../contentful\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction SinglePost(props) {\n  const [post, setPost] = React.useState(null);\n\n  React.useEffect(() => {\n    client\n      .getEntries({\n        content_type: \"quarantineFoodPickUp\",\n        \"fields.slug\": props.slug,\n      })\n      .then((entries) => {\n        setPost(entries.items[0]);\n      });\n  }, [props.slug]);\n\n  if (!post) {\n    return <div>Loading</div>;\n  }\n\n  const fields = post.fields.pickUpDate.split(\"T\");\n  const date = fields[0];\n\n  const orderDate = date.split(\"-\");\n  const pickUpdate = `${fields[1]} ${orderDate[2]}/${orderDate[1]}/${orderDate[0]}`;\n\n  return (\n    <Wrapper>\n      <SingleCard\n        title={post.fields.dish}\n        image={post.fields.image.fields.file.url}\n        ingredients={post.fields.ingredients}\n        portions={post.fields.portions}\n        price={post.fields.price}\n        date={pickUpdate}\n        address={post.fields.pickUpAddress}\n        description={post.fields.description}\n      />\n    </Wrapper>\n  );\n}\n\nexport default SinglePost;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst StyledHeader = styled.div`\n  width: 100vw;\n  height: 60px;\n  background-color: tomato;\n  position: fixed;\n  box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.41);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  h1 {\n    font-family: \"Raleway\", sans-serif;\n    font-weight: 100;\n  }\n`;\n\nfunction Header() {\n  return (\n    <StyledHeader>\n      <h1>Food pick up</h1>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport SinglePost from \"./pages/SinglePost\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header></Header>\n      <Router>\n        <Home path=\"/\" />\n        <SinglePost path=\"posts/:slug\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}